(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{369:function(_,v,e){"use strict";e.r(v);var t=e(42),o=Object(t.a)({},(function(){var _=this,v=_.$createElement,e=_._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[e("p",[e("a",{attrs:{href:"https://blog.csdn.net/weixin_39818813?type=lately",target:"_blank",rel:"noopener noreferrer"}},[_._v("转载：https://blog.csdn.net/weixin_39818813?type=lately"),e("OutboundLink")],1)]),_._v(" "),e("p",[_._v("前端知识体系3：【webpack+http】")]),_._v(" "),e("h2",{attrs:{id:"_6-webpack"}},[_._v("6. webpack")]),_._v(" "),e("h3",{attrs:{id:"_9-1-webpack的4要点-entry、output、loader、plugins"}},[_._v("9.1. webpack的4要点（entry、output、loader、plugins）")]),_._v(" "),e("p",[_._v("【网易】")]),_._v(" "),e("p",[e("a",{attrs:{href:"https://segmentfault.com/a/1190000021494964",target:"_blank",rel:"noopener noreferrer"}},[_._v("详情>"),e("OutboundLink")],1)]),_._v(" "),e("h3",{attrs:{id:"_9-2-webpack-loader-和-plugin-的区别"}},[_._v("9.2 webpack loader 和 plugin 的区别")]),_._v(" "),e("h3",{attrs:{id:"_9-2-webpack-import-打包后的结果是怎样的"}},[_._v("9.2 webpack import 打包后的结果是怎样的？")]),_._v(" "),e("p",[_._v("【字节】")]),_._v(" "),e("blockquote",[e("p",[e("code",[_._v("import")]),_._v("经过"),e("code",[_._v("webpack")]),_._v("打包以后变成一些"),e("code",[_._v("Map")]),_._v("对象，"),e("code",[_._v("key")]),_._v("为模块路径，"),e("code",[_._v("value")]),_._v("为模块的可执行函数；")])]),_._v(" "),e("blockquote",[e("p",[_._v("代码加载到浏览器以后从入口模块开始执行，其中执行的过程中，最重要的就是"),e("code",[_._v("webpack")]),_._v("定义的"),e("code",[_._v("__webpack_require__")]),_._v("函数，负责实际的模块加载并执行这些模块内容，返回执行结果，其实就是读取"),e("code",[_._v("Map")]),_._v("对象，然后执行相应的函数；")])]),_._v(" "),e("blockquote",[e("p",[_._v("当然其中的异步方法（import('xxModule')）比较特殊一些，它会单独打成一个包，采用动态加载的方式，具体过程：当用户触发其加载的动作时，会动态的在"),e("code",[_._v("head")]),_._v("标签中创建一个"),e("code",[_._v("script")]),_._v("标签，然后发送一个"),e("code",[_._v("http")]),_._v("请求，加载模块，模块加载完成以后自动执行其中的代码，主要的工作有两个，更改缓存中模块的状态，另一个就是执行模块代码。")])]),_._v(" "),e("p",[e("a",{attrs:{href:"https://juejin.cn/post/6859569958742196237",target:"_blank",rel:"noopener noreferrer"}},[_._v("详情>"),e("OutboundLink")],1)]),_._v(" "),e("h3",{attrs:{id:"_9-1-babel如何编译【必背】"}},[_._v("9.1.babel如何编译【必背】")]),_._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/4e0ee7117be87f110b7c406021250ea1.png",alt:"image.png"}})]),_._v(" "),e("p",[e("a",{attrs:{href:"https://juejin.cn/post/6844903956905197576",target:"_blank",rel:"noopener noreferrer"}},[_._v("详情1》"),e("OutboundLink")],1)]),_._v(" "),e("p",[e("a",{attrs:{href:"https://juejin.cn/post/6844903746804137991",target:"_blank",rel:"noopener noreferrer"}},[_._v("详情2》"),e("OutboundLink")],1)]),_._v(" "),e("h3",{attrs:{id:"_9-1-webpack怎么加载的-【必背】"}},[_._v("9.1 webpack怎么加载的？【必背】")]),_._v(" "),e("p",[_._v("【网易游戏，字节】")]),_._v(" "),e("p",[e("em",[e("code",[_._v("webpack")]),_._v("的打包过程大概流程是这样的：")])]),_._v(" "),e("blockquote",[e("ul",[e("li",[_._v("合并"),e("code",[_._v("webpack.config.js")]),_._v("和命令行传递的参数，形成最终的配置")]),_._v(" "),e("li",[_._v("解析配置，得到"),e("code",[_._v("entry")]),_._v("入口")]),_._v(" "),e("li",[_._v("读取入口文件内容，通过"),e("code",[_._v("@babel/parse")]),_._v("将入口内容（code）转换成"),e("code",[_._v("ast")])]),_._v(" "),e("li",[_._v("通过"),e("code",[_._v("@babel/traverse")]),_._v("遍历"),e("code",[_._v("ast")]),_._v("得到模块的各个依赖")]),_._v(" "),e("li",[_._v("通过"),e("code",[_._v("@babel/core")]),_._v("（实际的转换工作是由"),e("code",[_._v("@babel/preset-env")]),_._v("来完成的）将"),e("code",[_._v("ast")]),_._v("转换成"),e("code",[_._v("es5 code")])]),_._v(" "),e("li",[_._v("通过循环伪递归的方式拿到所有模块的所有依赖并都转换成"),e("code",[_._v("es5")])])])]),_._v(" "),e("p",[e("a",{attrs:{href:"https://segmentfault.com/a/1190000021494964",target:"_blank",rel:"noopener noreferrer"}},[_._v("webpack的打包构建流程"),e("OutboundLink")],1),_._v("(写的很明白可以多看几遍，看完几乎可以自己写一个简易的webpack了)")]),_._v(" "),e("p",[e("a",{attrs:{href:"https://webpack.wuhaolin.cn/",target:"_blank",rel:"noopener noreferrer"}},[_._v("深入浅出 Webpack手册---文档>"),e("OutboundLink")],1)]),_._v(" "),e("h3",{attrs:{id:"_9-2-webpack-异步加载和分包的原理是什么"}},[_._v("9.2 webpack 异步加载和分包的原理是什么")]),_._v(" "),e("p",[_._v("【腾讯】")]),_._v(" "),e("p",[_._v("webpack的分包如何实现？可以说下具体的配置吗？")]),_._v(" "),e("p",[e("a",{attrs:{href:"https://www.cnblogs.com/goloving/p/14030945.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("异步加载和分包"),e("OutboundLink")],1)]),_._v(" "),e("h3",{attrs:{id:"_9-3-webpack-打-polyfill-都有哪几种方式"}},[_._v("9.3 webpack 打 polyfill 都有哪几种方式")]),_._v(" "),e("p",[_._v("【腾讯】")]),_._v(" "),e("p",[e("a",{attrs:{href:"https://segmentfault.com/a/1190000010106158",target:"_blank",rel:"noopener noreferrer"}},[_._v("link"),e("OutboundLink")],1)]),_._v(" "),e("h3",{attrs:{id:"_9-1-webpack和vite的区别"}},[_._v("9.1 webpack和vite的区别")]),_._v(" "),e("p",[_._v("webpack构建的时候需要全量构建，在浏览器渲染前就需要从入口文件开始，将所有路由文件的依赖以及依赖的依赖全部打包，放入js bundle中，然后再启动开发服务器，所以耗时会很久。")]),_._v(" "),e("p",[_._v("而vite先启动开发服务器，利用了浏览器ESMoudule能力,无需打包，直接在请求所需模块并实时编译，")]),_._v(" "),e("table",[e("thead",[e("tr",[e("th",[_._v("Webpack")]),_._v(" "),e("th",[_._v("Vite")])])]),_._v(" "),e("tbody",[e("tr",[e("td",[_._v("先打包生成bundle，再启动开发服务器")]),_._v(" "),e("td",[_._v("先启动开发服务器，利用新一代浏览器的ESM能力，无需打包，直接请求所需模块并实时编译")])]),_._v(" "),e("tr",[e("td",[_._v("HMR时需要把改动模块及相关依赖全部编译")]),_._v(" "),e("td",[_._v("HMR时只需让浏览器重新请求该模块，同时利用浏览器的缓存（源码模块协商缓存，依赖模块强缓存）来优化请求")])])])]),_._v(" "),e("h3",{attrs:{id:"_9-1-介绍一下-vite-的原理-它会去编译你的代码吗-vite-引用-commonjs-的包的时候怎么处理"}},[_._v("9.1 介绍一下 vite 的原理，它会去编译你的代码吗，vite 引用 commonjs 的包的时候怎么处理")]),_._v(" "),e("p",[_._v("【小红书】")]),_._v(" "),e("p",[_._v("Vite 会在本地帮你启动一个服务器，当浏览器读取到 html 文件之后，会在执行到 import 的时候才去向服务端发送 某个模块的请求，Vite 此时在利用内部的一系列黑魔法，包括 Vue 的 template 解析，代码的编译等等，解析成浏览器可以执行的 js 文件返回到浏览器端。")]),_._v(" "),e("p",[_._v("这就保证了只有在真正使用到这个模块的时候，浏览器才会请求并且解析这个模块，最大程度的做到了按需加载。")]),_._v(" "),e("p",[_._v("换个支持vite的包吧")]),_._v(" "),e("p",[e("a",{attrs:{href:"https://juejin.cn/post/6932367804108800007#heading-1",target:"_blank",rel:"noopener noreferrer"}},[_._v("原理"),e("OutboundLink")],1)]),_._v(" "),e("h3",{attrs:{id:"_9-2-为什么vite比webpack快很多-esm和commonjs的区别是什么-为什么esm加载会更快-如何理解esm的静态"}},[_._v("9.2 为什么Vite比webpack快很多，ESM和commonJS的区别是什么，为什么ESM加载会更快，如何理解ESM的静态")]),_._v(" "),e("p",[_._v("【大疆】")]),_._v(" "),e("h3",{attrs:{id:"_9-2-vite-依赖与预构建是把所有的用到的依赖都合并到一起还是每个都是单独的包-一个包安装了多个版本问题如何处理"}},[_._v("9.2 Vite 依赖与预构建是把所有的用到的依赖都合并到一起还是每个都是单独的包，一个包安装了多个版本问题如何处理")]),_._v(" "),e("p",[e("a",{attrs:{href:"https://juejin.cn/post/6932367804108800007#heading-2",target:"_blank",rel:"noopener noreferrer"}},[_._v("预构建"),e("OutboundLink")],1)]),_._v(" "),e("h3",{attrs:{id:"_9-2-webpack-迁移-vite-遇到过哪些问题-之前-webpack-慢是为什么-有过优化么-迁移后怎么测试的"}},[_._v("9.2 webpack 迁移 Vite 遇到过哪些问题，之前 webpack 慢是为什么，有过优化么，迁移后怎么测试的")]),_._v(" "),e("p",[_._v("【小红书，美团，腾讯音乐】")]),_._v(" "),e("p",[_._v("查看自己写的webpack迁移的文章")]),_._v(" "),e("p",[e("strong",[_._v("webpack 慢")])]),_._v(" "),e("p",[_._v("因为它需要全量构建")]),_._v(" "),e("p",[e("strong",[_._v("优化")])]),_._v(" "),e("p",[_._v("查看webpack性能优化")]),_._v(" "),e("h3",{attrs:{id:"_9-2-webpack-和-vite-的区别是什么-切-vite-的动力是什么"}},[_._v("9.2 webpack 和 vite 的区别是什么，切 Vite 的动力是什么")]),_._v(" "),e("p",[_._v("【网易灵犀】")]),_._v(" "),e("p",[e("a",{attrs:{href:"https://juejin.cn/post/6980141344131923999",target:"_blank",rel:"noopener noreferrer"}},[_._v("vite介绍"),e("OutboundLink")],1)]),_._v(" "),e("p",[_._v("一方面我们的项目启动每次都要40s以上，另外一方面也是想了解下新的技术。")]),_._v(" "),e("h3",{attrs:{id:"_9-2-snowpack-有了解过么-它和-vite-有什么区别"}},[_._v("9.2 snowpack 有了解过么，它和 vite 有什么区别")]),_._v(" "),e("p",[_._v("【网易灵犀】")]),_._v(" "),e("p",[_._v("snowpack 以 ES Modules 为主")]),_._v(" "),e("p",[e("a",{attrs:{href:"https://blog.csdn.net/NewTyun/article/details/118004978",target:"_blank",rel:"noopener noreferrer"}},[_._v("link"),e("OutboundLink")],1)]),_._v(" "),e("h3",{attrs:{id:"_9-3-rollup和webpack打包结果有什么异同"}},[_._v("9.3 Rollup和webpack打包结果有什么异同")]),_._v(" "),e("p",[_._v("【腾讯广告】")]),_._v(" "),e("h3",{attrs:{id:"_9-2-微前端有了解吗"}},[_._v("9.2  微前端有了解吗")]),_._v(" "),e("p",[e("strong",[_._v("什么是微前端")])]),_._v(" "),e("p",[e("code",[_._v("微前端")]),_._v("是一种类似于微服务的架构，它将微服务的理念应用于浏览器端，即将 Web 应用由"),e("code",[_._v("单一")]),_._v("的单体应用转变为"),e("code",[_._v("多个小型前端应用")]),_._v("聚合为一的应用。各个前端应用还可以"),e("code",[_._v("独立运行")]),_._v("、"),e("code",[_._v("独立开发")]),_._v("、"),e("code",[_._v("独立部署")]),_._v("。")]),_._v(" "),e("p",[e("strong",[_._v("什么要用微前端")])]),_._v(" "),e("p",[_._v("任何一种技术或者概念都有其适用场景，微前端也不例外。 针对中小型的项目，使用微前端反而会将事情复杂化 ，因为微前端对项目的开发并不友好。")]),_._v(" "),e("p",[_._v("适用于以下场景：")]),_._v(" "),e("ul",[e("li",[_._v("项目技术栈过于老旧,相关技能的开发人员少,功能扩展吃力,重构成本高,维护成本高.")]),_._v(" "),e("li",[_._v("项目过于庞大,代码编译慢,开发体差,需要一种更高维度的解耦方案.")]),_._v(" "),e("li",[_._v("单一技术栈无法满足你的业务需求")])]),_._v(" "),e("p",[e("strong",[_._v("使用过哪个方案")])]),_._v(" "),e("p",[_._v("有使用过webpack5的联邦模块对现有的2个项目进行构建")]),_._v(" "),e("p",[e("a",{attrs:{href:"https://wanglaibin.blog.csdn.net/article/details/100527780?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-2.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-2.no_search_link",target:"_blank",rel:"noopener noreferrer"}},[_._v("link"),e("OutboundLink")],1)]),_._v(" "),e("h3",{attrs:{id:"_9-3-你有了解过-webpack-现在也支持-esm-了吗"}},[_._v("9.3 你有了解过 webpack 现在也支持 esm 了吗？")]),_._v(" "),e("p",[_._v("webpack4需要通过插件esm-webpack-plugin才能实现。webpack5直接支持。")]),_._v(" "),e("h3",{attrs:{id:"_9-4-前端的工程化都做了哪些事情"}},[_._v("9.4 前端的工程化都做了哪些事情？")]),_._v(" "),e("p",[_._v("【美团，网易传媒，腾讯，360】")]),_._v(" "),e("p",[e("strong",[_._v("前端工程化")]),_._v("是使用软件工程的技术和方法来进行前端的开发流程、技术、工具、经验等规范化、标准化，其主要目的***为了提高效率和降低成本，即提高开发过程中的开发效率，减少不必要的重复工作时间***，而前端工程本质上是软件工程的一种，因此我们应该从软件工程的角度来研究前端工程。")]),_._v(" "),e("p",[_._v("前端工程化就是为了让前端开发能够“自成体系”，主要包括"),e("strong",[_._v("模块化")]),_._v("、"),e("strong",[_._v("组件化")]),_._v("、"),e("strong",[_._v("规范化")]),_._v("、"),e("strong",[_._v("自动化")]),_._v("四个方面")]),_._v(" "),e("ul",[e("li",[_._v("模块化: 简单来说，模块化就是将一个大文件拆分成相互依赖的小文件，再进行统一的拼装和加载。")]),_._v(" "),e("li",[_._v("组件化：组件化是在"),e("code",[_._v("设计层面")]),_._v("上，对UI（用户界面）的拆分。（模块化只是在"),e("code",[_._v("文件层面")]),_._v("上，对代码或资源的拆分；）")]),_._v(" "),e("li",[_._v("规范化：目录结构的制定，编码规范，HTML规范，CSS规范，图片规范，命名规范，前后端接口规范。")]),_._v(" "),e("li",[_._v("自动化：自动化构建，自动化测试，自动化部署")])]),_._v(" "),e("p",[e("a",{attrs:{href:"https://www.jianshu.com/p/88ed70476adb",target:"_blank",rel:"noopener noreferrer"}},[_._v("详情"),e("OutboundLink")],1)]),_._v(" "),e("h3",{attrs:{id:"_9-5-esbuild-有了解吗"}},[_._v("9.5 esbuild 有了解吗")]),_._v(" "),e("p",[_._v("【知乎】")]),_._v(" "),e("p",[_._v("了解不多，只知道ESbuild 是一个类似webpack构建工具。它的构建速度是 webpack 的几十倍。")]),_._v(" "),e("p",[e("strong",[_._v("为什么这么快 ？")])]),_._v(" "),e("ul",[e("li",[_._v("js是单线程串行，esbuild是新开一个进程，然后多线程并行，充分发挥多核优势")]),_._v(" "),e("li",[_._v("go是纯机器码，肯定要比JIT快")]),_._v(" "),e("li",[_._v("不使用 AST，优化了构建流程。（也带来了一些缺点，后面会说）")])]),_._v(" "),e("p",[e("a",{attrs:{href:"https://juejin.cn/post/6918927987056312327",target:"_blank",rel:"noopener noreferrer"}},[_._v("详情"),e("OutboundLink")],1)]),_._v(" "),e("h3",{attrs:{id:"_9-6-写过webpack插件么"}},[_._v("9.6 写过webpack插件么")]),_._v(" "),e("p",[_._v("【网易传媒,360】")]),_._v(" "),e("h3",{attrs:{id:"_9-7-babel转换的原理是什么"}},[_._v("9.7  babel转换的原理是什么")]),_._v(" "),e("p",[_._v("【网易传媒】")]),_._v(" "),e("h3",{attrs:{id:"_9-8-babel配置过么-preset和plugin谁的优先级高"}},[_._v("9.8 babel配置过么，preset和plugin谁的优先级高")]),_._v(" "),e("p",[_._v("【360】")]),_._v(" "),e("h2",{attrs:{id:"_8-http"}},[_._v("8.http")]),_._v(" "),e("h3",{attrs:{id:"_8-1-从url到渲染页面题-尽可能详细。然后面试官会从每个阶段进行扩展性提问"}},[_._v("8.1. 从url到渲染页面题，尽可能详细。然后面试官会从每个阶段进行扩展性提问")]),_._v(" "),e("p",[_._v("【腾讯广告 荔枝】")]),_._v(" "),e("p",[e("a",{attrs:{href:"https://juejin.cn/post/6844904191018680333#heading-0",target:"_blank",rel:"noopener noreferrer"}},[_._v("详情"),e("OutboundLink")],1)]),_._v(" "),e("h3",{attrs:{id:"_4-2-都有用到过哪些协议"}},[_._v("4.2 都有用到过哪些协议")]),_._v(" "),e("p",[_._v("【腾讯音乐】")]),_._v(" "),e("p",[_._v("1.DNS：域名解析协议")]),_._v(" "),e("p",[_._v("2.FTP(File Transfer Protocol)文件传输协议，它是一个标准协议，是在计算机和网络之间交换文件的最简单的方法。")]),_._v(" "),e("p",[_._v("3.HTTP(Hypertext Transfer Protocol )：超文本传输协议")]),_._v(" "),e("p",[_._v("4.HTTPS(Secure Hypertext Transfer Protocol)：安全超文本传输协议，它是由Netscape开发并内置于其浏览器中，用于对数据进行压缩和解压操作.")]),_._v(" "),e("p",[_._v("5.TCP（Transmission Control Protocol）： 传输控制协议，是一种面向连接的、可靠的、基于字节流的传输层通信协议  log转发：开启一个协议：tcp(三次握手和四次挥手)")]),_._v(" "),e("h3",{attrs:{id:"_4-3-get和post有什么区别"}},[_._v("4.3 get和post有什么区别")]),_._v(" "),e("p",[_._v("【360】")]),_._v(" "),e("h3",{attrs:{id:"_4-4-讲讲客户端存储的方式有哪些"}},[_._v("4.4 讲讲客户端存储的方式有哪些")]),_._v(" "),e("p",[_._v("【字节，映客直播】")]),_._v(" "),e("table",[e("thead",[e("tr",[e("th",[_._v("特性")]),_._v(" "),e("th",[_._v("Cookie")]),_._v(" "),e("th",[_._v("localStorage")]),_._v(" "),e("th",[_._v("sessionStorage")]),_._v(" "),e("th",[_._v("indexDB")])])]),_._v(" "),e("tbody",[e("tr",[e("td",[_._v("数据的生命期")]),_._v(" "),e("td",[_._v("一般由服务器生成，可设置失效时间。如果在浏览器端生成Cookie，默认是关闭浏览器后失效")]),_._v(" "),e("td",[_._v("除非被清除，否则永久保存")]),_._v(" "),e("td",[_._v("仅在当前会话下有效，关闭页面或浏览器后被清除")]),_._v(" "),e("td",[_._v("浏览器本地数据库永久")])]),_._v(" "),e("tr",[e("td",[_._v("存放数据大小")]),_._v(" "),e("td",[_._v("4K左右")]),_._v(" "),e("td",[_._v("一般为5MB")]),_._v(" "),e("td",[_._v("一般为5MB")]),_._v(" "),e("td",[_._v("没有大小限制")])]),_._v(" "),e("tr",[e("td",[_._v("与服务器端通信")]),_._v(" "),e("td",[_._v("每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题")]),_._v(" "),e("td",[_._v("仅在客户端（即浏览器）中保存，不参与和服务器的通信")]),_._v(" "),e("td",[_._v("仅在客户端（即浏览器）中保存，不参与和服务器的通信")]),_._v(" "),e("td",[_._v("不参与和服务器的通信")])]),_._v(" "),e("tr",[e("td",[_._v("易用性")]),_._v(" "),e("td",[_._v("需要程序员自己封装，源生的Cookie接口不友好")]),_._v(" "),e("td",[_._v("源生接口可以接受，亦可再次封装来对Object和Array有更好的支持")]),_._v(" "),e("td",[_._v("源生接口可以接受，亦可再次封装来对Object和Array有更好的支持")]),_._v(" "),e("td",[_._v("非关系型数据库")])])])]),_._v(" "),e("p",[e("a",{attrs:{href:"https://www.jianshu.com/p/bb116c7a74b3",target:"_blank",rel:"noopener noreferrer"}},[_._v("详情>"),e("OutboundLink")],1)]),_._v(" "),e("h3",{attrs:{id:"_4-4-如何防止脚本获取cookie"}},[_._v("4.4 如何防止脚本获取cookie")]),_._v(" "),e("p",[_._v("【字节】")]),_._v(" "),e("blockquote",[e("p",[_._v("XSS即跨站脚本攻击，是攻击者在返回的HTML中嵌入JavaScript脚本。")])]),_._v(" "),e("p",[_._v("防范XSS攻击,在HTTP头部上配置，"),e("code",[_._v("set-cookie")]),_._v("，有两个属性可以防止XSS攻击（获取cookie）")]),_._v(" "),e("ul",[e("li",[e("strong",[_._v("httponly")]),_._v(" ：这个属性可"),e("code",[_._v("禁止JavaScript")]),_._v("访问Cookie，故可以保护Cookie不被嵌入的恶意代码所获取。")]),_._v(" "),e("li",[e("strong",[_._v("secure")]),_._v(" ：这个属性告诉客户端浏览器仅当在"),e("code",[_._v("https")]),_._v("请求时发送Cookie\n如：")])]),_._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[_._v("response"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[_._v("setHeader")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[_._v('"Set-Cookie"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(",")]),_._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[_._v('"cookiename=httponlyTest;Path=/;Domain=domainvalue;Max-Age=seconds;HTTPOnly"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("\n")])])]),e("h3",{attrs:{id:"_4-4-协商缓存与强缓存"}},[_._v("4.4 协商缓存与强缓存")]),_._v(" "),e("p",[_._v("【网易传媒，字节，360】")]),_._v(" "),e("p",[_._v("强缓存和协商缓存谁的优先级谁高？")]),_._v(" "),e("p",[_._v("强缓存和服务器有通讯么？")]),_._v(" "),e("p",[_._v("没有通讯的话有状态码么，状态码是谁返回的，缓存是存到了哪里？")]),_._v(" "),e("p",[e("a",{attrs:{href:"https://blog.csdn.net/goutinga/article/details/114221443",target:"_blank",rel:"noopener noreferrer"}},[_._v("详情>"),e("OutboundLink")],1)]),_._v(" "),e("h3",{attrs:{id:"_4-2-http-缓存-内存缓存和磁盘缓存的区别-哪些文件存在这两内存"}},[_._v("4.2. http 缓存 ，内存缓存和磁盘缓存的区别，哪些文件存在这两内存")]),_._v(" "),e("ul",[e("li",[e("p",[_._v("http 缓存，即强缓存和协商缓存，"),e("a",{attrs:{href:"https://blog.csdn.net/goutinga/article/details/114221443",target:"_blank",rel:"noopener noreferrer"}},[_._v("详情>"),e("OutboundLink")],1)])]),_._v(" "),e("li",[e("p",[_._v("内存缓存和磁盘缓存，"),e("a",{attrs:{href:"https://blog.csdn.net/FengNext/article/details/100172186?utm_term=%E6%B5%8F%E8%A7%88%E5%99%A8%E7%A3%81%E7%9B%98%E5%92%8C%E5%86%85%E5%AD%98%E7%BC%93%E5%AD%98&utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduweb~default-1-100172186&spm=3001.4430",target:"_blank",rel:"noopener noreferrer"}},[_._v("详情>"),e("OutboundLink")],1)])])]),_._v(" "),e("p",[e("strong",[_._v("解析：")])]),_._v(" "),e("ul",[e("li",[_._v("内存缓存会将编译解析后的文件，直接存入该进程的内存中")]),_._v(" "),e("li",[_._v("对于大文件来说，大概率是不存储在内存中的，反之优先")]),_._v(" "),e("li",[_._v("当前系统内存"),e("strong",[_._v("使用率")]),_._v("高的话，文件优先存储进硬盘")])]),_._v(" "),e("p",[_._v("在浏览器中，浏览器会在"),e("code",[_._v("js")]),_._v("和"),e("code",[_._v("图片")]),_._v("等文件解析执行后直接存入"),e("code",[_._v("内存缓存")]),_._v("中，那么当刷新页面时只需直接从"),e("code",[_._v("内存缓存")]),_._v("中读取("),e("code",[_._v("from memory cache")]),_._v(")；而"),e("code",[_._v("css")]),_._v("文件则会存入"),e("code",[_._v("硬盘文件")]),_._v("中，所以每次渲染页面都需要从硬盘读取缓存("),e("code",[_._v("from disk cache")]),_._v(")。")]),_._v(" "),e("p",[e("strong",[_._v("为什么一般js和图片文件会放到内存缓存，css 放在硬盘缓存？")])]),_._v(" "),e("p",[_._v("样式表一般在磁盘中，不会缓存到内存中去，因为CSS样式加载一次即可渲染出网页。\n但是，脚本却可能随时会执行，如果脚本在磁盘当中，在执行该脚本需要从磁盘中取到内存当中来。这样的IO开销是比较大的，有可能会导致浏览器失去响应。因此，脚本一般在内存中。")]),_._v(" "),e("h3",{attrs:{id:"_4-2-cookie都有哪些属性-samesite作用是什么"}},[_._v("4.2 cookie都有哪些属性，samesite作用是什么，")]),_._v(" "),e("p",[_._v("【360】")]),_._v(" "),e("p",[_._v("cookie属性？")]),_._v(" "),e("p",[_._v("cookie和storage的区别是什么？")]),_._v(" "),e("p",[e("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2019/09/cookie-samesite.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("SameSite 有哪几个值"),e("OutboundLink")],1)]),_._v(" "),e("h3",{attrs:{id:"_4-1-浏览器请求头和响应头都能记起哪些-都是做什么的"}},[_._v("4.1 浏览器请求头和响应头都能记起哪些，都是做什么的")]),_._v(" "),e("p",[_._v("【网易传媒】")]),_._v(" "),e("p",[e("strong",[_._v("General：")]),_._v(" 请求行")]),_._v(" "),e("p",[_._v("方法，状态，地址，ip")]),_._v(" "),e("ul",[e("li",[e("strong",[_._v("Request URL")]),_._v(":https://position.csdnimg.cn/oapi/get")]),_._v(" "),e("li",[e("strong",[_._v("Request Method")]),_._v(":GET")]),_._v(" "),e("li",[e("strong",[_._v("Status Code")]),_._v(":200")]),_._v(" "),e("li",[e("strong",[_._v("Remote Address")]),_._v(":39.96.132.69:443")]),_._v(" "),e("li",[_._v("Referrer Policy:unsafe-url")])]),_._v(" "),e("p",[e("strong",[_._v("Request Headers：")]),_._v(" 请求头")]),_._v(" "),e("p",[_._v("方法，路径，协议，类型，域名，来源，信息")]),_._v(" "),e("ul",[e("li",[e("strong",[_._v(":authority")]),_._v(":position.csdnimg.cn")]),_._v(" "),e("li",[e("strong",[_._v(":method")]),_._v(":GET "),e("code",[_._v("【方法】")])]),_._v(" "),e("li",[e("strong",[_._v(":path")]),_._v(":/oapi/get "),e("code",[_._v("【接口的地址】")])]),_._v(" "),e("li",[e("strong",[_._v(":scheme")]),_._v(": https "),e("code",[_._v("【协议】")])]),_._v(" "),e("li",[e("strong",[_._v("accept")]),_._v(":application/json, text/javascript, "),e("em",[_._v("/")]),_._v("; q=0.01"),e("code",[_._v("【浏览器可以接受的媒体类型】")])]),_._v(" "),e("li",[e("strong",[_._v("accept-encoding")]),_._v("：gzip, deflate, br"),e("code",[_._v("【浏览器接受的编码方法】")])]),_._v(" "),e("li",[e("strong",[_._v("accept-language")]),_._v(": zh-CN,zh;q=0.9"),e("code",[_._v("【浏览器接受的语言】")])]),_._v(" "),e("li",[e("strong",[_._v("content-type")]),_._v(":application/json")]),_._v(" "),e("li",[e("strong",[_._v("origin")]),_._v(": https://blog.csdn.net "),e("code",[_._v("【域名】")])]),_._v(" "),e("li",[e("strong",[_._v("Host")]),_._v(":blog.csdn.net"),e("code",[_._v("【主机】")])]),_._v(" "),e("li",[e("strong",[_._v("referer")]),_._v(": https://blog.csdn.net/thc1987/article/details/86596893 "),e("code",[_._v("【请求的来源】")])]),_._v(" "),e("li",[_._v('sec-ch-ua: " Not A;Brand";v="99", "Chromium";v="96", "Google Chrome";v="96"')]),_._v(" "),e("li",[_._v("sec-ch-ua-mobile:?0")]),_._v(" "),e("li",[_._v('sec-ch-ua-platform:"Windows"')]),_._v(" "),e("li",[_._v("sec-fetch-dest: empty")]),_._v(" "),e("li",[_._v("sec-fetch-mode:cors")]),_._v(" "),e("li",[_._v("sec-fetch-site:cross-site")]),_._v(" "),e("li",[e("strong",[_._v("user-agent")]),_._v(":Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36"),e("code",[_._v("【浏览器信息】")])])]),_._v(" "),e("p",[e("strong",[_._v("Response Headers")]),_._v(" 响应头")]),_._v(" "),e("p",[_._v("cookie，跨域，日期，类型")]),_._v(" "),e("ul",[e("li",[_._v("access-control-allow-credentials: true")]),_._v(" "),e("li",[e("strong",[_._v("cookie")]),_._v(":''")]),_._v(" "),e("li",[e("strong",[_._v("access-control-allow-methods")]),_._v(": GET,PUT,POST,DELETE,OPTIONS 【跨域能接受的请求方法】")]),_._v(" "),e("li",[e("strong",[_._v("access-control-allow-origin")]),_._v(":https://blog.csdn.net 【设置某个站点允许跨域】")]),_._v(" "),e("li",[e("strong",[_._v("content-type")]),_._v(":application/json;charset=UTF-8 【返回的媒体类型】")]),_._v(" "),e("li",[e("strong",[_._v("date")]),_._v(":Fri, 24 Dec 2021 03:11:52 GMT 【日期】")]),_._v(" "),e("li",[_._v("server:openresty")]),_._v(" "),e("li",[e("strong",[_._v("set-cookie")]),_._v(": uuid_tt_dd=10_19026958530-1640315512686-121668; Expires=Thu, 01 Jan 2025 00:00:00 GMT; Path=/; Domain=.csdn.net;")])]),_._v(" "),e("p",[e("strong",[_._v("请求头的host，origin，refer的区别是什么")])]),_._v(" "),e("ul",[e("li",[e("strong",[_._v("origin")]),_._v(": https://blog.csdn.net "),e("code",[_._v("【域名】")]),_._v("，带协议")]),_._v(" "),e("li",[e("strong",[_._v("Host")]),_._v(":blog.csdn.net"),e("code",[_._v("【主机】")]),_._v("，不带协议")]),_._v(" "),e("li",[e("strong",[_._v("referer")]),_._v(": https://blog.csdn.net/thc1987/article/details/86596893 "),e("code",[_._v("【请求的来源地址】")])])]),_._v(" "),e("h3",{attrs:{id:"_4-2-在什么场景下会发起options请求"}},[_._v("4.2 在什么场景下会发起options请求")]),_._v(" "),e("blockquote",[e("p",[_._v("概念：options作为一次预检请求，服务器基于从预检请求头部获得的信息来判断，是否接受接下来的实际请求。")])]),_._v(" "),e("p",[_._v("1、跨域请求，非跨域请求不会出现options请求"),e("br"),_._v("\n2、自定义请求头"),e("br"),_._v("\n3、请求头中的content-type是application/x-www-form-urlencoded，multipart/form-data，text/plain之外的格式")]),_._v(" "),e("h3",{attrs:{id:"_4-1-什么是tcp"}},[_._v("4.1 什么是tcp")]),_._v(" "),e("ul",[e("li",[_._v("TCP代表"),e("code",[_._v("传输控制协议")]),_._v("，是Internet协议套件中的"),e("code",[_._v("基本协议")])]),_._v(" "),e("li",[_._v("是一种"),e("code",[_._v("网络通信协议")])]),_._v(" "),e("li",[_._v("它规定如何"),e("code",[_._v("建立")]),_._v("和"),e("code",[_._v("维护")]),_._v("两个程序交换"),e("code",[_._v("数据")]),_._v("的"),e("code",[_._v("连接")]),_._v("，如何通过Internet"),e("code",[_._v("发送信息")]),_._v("。")])]),_._v(" "),e("p",[_._v("TCP补充了Internet协议（IP协议），它定义了用于识别Internet上系统的IP地址，主要确保不同节点之间的端到端数据传输。Internet协议提供用于传输数据的指令，同时TCP创建连接并确保将数据传递到正确的目标。这两种协议通常是协同工作的，称为TCP / IP套件。")]),_._v(" "),e("p",[_._v("TCPTCP与Internet协议协同工作，Internet协议定义远程节点的逻辑位置，而TCP传输并确保将数据传递到正确的目标。")]),_._v(" "),e("p",[e("strong",[_._v("TCP的工作原理？")])]),_._v(" "),e("p",[_._v("TCP的工作是将消息或文件分解成更小的片段（称为数据包），在通过Internet发送。然后，这些数据包由另一个TCP层接收，然后将该数据重组为完整的文件或消息。")]),_._v(" "),e("p",[_._v("TCP还负责对数据流进行错误检查，以确保数据的传递; 如果发现错误，则TCP重新传输数据包。")]),_._v(" "),e("h3",{attrs:{id:"_4-4-一个-tcp-可以发起多少个-http请求-http2-0-有限制吗"}},[_._v("4.4 一个 tcp 可以发起多少个 http请求？http2.0 有限制吗")]),_._v(" "),e("p",[e("a",{attrs:{href:"https://blog.csdn.net/john1337/article/details/104588310",target:"_blank",rel:"noopener noreferrer"}},[_._v("详情"),e("OutboundLink")],1)]),_._v(" "),e("h3",{attrs:{id:"_4-5-tcp发送和接收包的情况-是一次性发-还是逐次发-如何排序-具体标志位是什么。"}},[_._v("4.5 tcp发送和接收包的情况，是一次性发，还是逐次发，如何排序，具体标志位是什么。")]),_._v(" "),e("h3",{attrs:{id:"_4-2-七层网络结构"}},[_._v("4.2 七层网络结构")]),_._v(" "),e("p",[e("a",{attrs:{href:"https://blog.csdn.net/u010359398/article/details/82142449",target:"_blank",rel:"noopener noreferrer"}},[_._v("地址"),e("OutboundLink")],1)]),_._v(" "),e("h3",{attrs:{id:"_4-1-常见的http状态码都有哪些"}},[_._v("4.1 常见的HTTP状态码都有哪些")]),_._v(" "),e("p",[_._v("【腾讯音乐】")]),_._v(" "),e("p",[e("a",{attrs:{href:"https://blog.csdn.net/byhage1/article/details/98208531",target:"_blank",rel:"noopener noreferrer"}},[_._v("详情"),e("OutboundLink")],1)]),_._v(" "),e("h3",{attrs:{id:"_9-控制台的性能分析和调试"}},[_._v("9. 控制台的性能分析和调试")]),_._v(" "),e("h3",{attrs:{id:"_4-1-http1-0-1-1-2-都有哪些区别【必背】"}},[_._v("4.1 http1.0，1.1，2 都有哪些区别【必背】")]),_._v(" "),e("p",[_._v("【aptap】")]),_._v(" "),e("h4",{attrs:{id:"_1-http1-0"}},[_._v("1. HTTP1.0")]),_._v(" "),e("p",[_._v("1.0的HTTP版本，是一种"),e("code",[_._v("无状态")]),_._v("（协议在交互性场景没有记忆能力，例如，记住登录状态），"),e("code",[_._v("无连接")]),_._v("（浏览器每次请求都要建立TCP连接，服务器处理完成以后立即断开TCP连接）的应用层协议。 HTTP1.0规定浏览器和服务器保持短暂的链接。")]),_._v(" "),e("p",[_._v("这种"),e("code",[_._v("无状态")]),_._v("性可以借助"),e("code",[_._v("cookie/session")]),_._v("机制来做身份认证和状态记录。")]),_._v(" "),e("blockquote",[e("p",[_._v("HTTP1.0存在的问题")])]),_._v(" "),e("p",[e("strong",[_._v("无法复用连接")])]),_._v(" "),e("p",[_._v("每次发送请求，都需要建立一次TCP连接，而TCP的连接释放过程又是比较费事的。这种无连接的特性会使得网络的利用率变低。")]),_._v(" "),e("p",[e("strong",[_._v("队头阻塞（head of line blocking）")])]),_._v(" "),e("p",[_._v("由于HTTP1.0规定下一个请求必须在前一个请求响应到达之后才能发送，假设前一个请求响应一直不到达，那么下一个请求就不发送，后面的请求就阻塞了。")]),_._v(" "),e("h4",{attrs:{id:"_2-http1-1"}},[_._v("2. HTTP1.1")]),_._v(" "),e("p",[_._v("HTTP1.1继承了HTTP1.0的简单，克服了HTTP1.0性能上的问题。")]),_._v(" "),e("p",[e("strong",[_._v("长连接")])]),_._v(" "),e("p",[_._v("HTTP1.1增加"),e("code",[_._v("Connection")]),_._v("字段，通过设置"),e("code",[_._v("Keep-Alive")]),_._v("保持HTTP连接不断开。避免每次客户端与服务器请求都要重复建立释放建立TCP连接。提高了网络的利用率。")]),_._v(" "),e("p",[_._v("如果客户端想"),e("code",[_._v("关闭HTTP")]),_._v("连接，可以在请求头中携带"),e("code",[_._v("Connection:false")]),_._v("来告知服务器"),e("code",[_._v("关闭")]),_._v("请求。")]),_._v(" "),e("p",[e("strong",[_._v("管道化（pipelining）— 尴尬的假并行传输")])]),_._v(" "),e("p",[_._v("HTTP1.1支持请求管道化（pipelining）。")]),_._v(" "),e("p",[_._v("基于HTTP1.1的长连接，使得请求管线化成为可能。 管线化使得请求能够"),e("code",[_._v("并行传输")]),_._v("。")]),_._v(" "),e("p",[e("strong",[_._v("例如：")])]),_._v(" "),e("p",[_._v("假如响应的主体是一个"),e("code",[_._v("html")]),_._v("页面，页面中包含了很多"),e("code",[_._v("img")]),_._v("，这个时候keep-alive就了很大作用。能够"),e("code",[_._v("并行")]),_._v("发送多个请求。（注意，这里的"),e("code",[_._v("并行")]),_._v("并不是真正意义上的"),e("code",[_._v("并行传输")]),_._v("）")]),_._v(" "),e("p",[_._v("需要注意的是：服务器必须按照"),e("code",[_._v("客户端")]),_._v("请求的"),e("code",[_._v("先后顺序")]),_._v("依次"),e("code",[_._v("返回")]),_._v("相应的结果，以保证客户端能够区分出每次请求的响应内容。")]),_._v(" "),e("p",[_._v("也就是说，HTTP管道化可以让我们把"),e("code",[_._v("先进先出队列")]),_._v("从客户端（请求队列）迁移到服务端（响应队列）")]),_._v(" "),e("p",[_._v("如果，客户端同时发了两个请求分别获取html和css，假如说服务器的css资源先准备就绪，服务器也会先发送html，再发送css。\n换句话来说，只有等到html响应的资源完全传输完毕后，css响应的资源才开始传输，"),e("code",[_._v("不允许")]),_._v("同时存在"),e("code",[_._v("两个并行")]),_._v("的"),e("code",[_._v("响应")]),_._v("。")]),_._v(" "),e("p",[_._v("可见，"),e("code",[_._v("HTTP1.1")]),_._v("还是"),e("code",[_._v("无法解决队头阻塞")]),_._v("（head of line blocking）的问题。同时“管道化”技术存在各种各样的问题，所以很多浏览器要么根本不支持它，要么直接默认关闭，并且开启的条件很苛刻……而且好像实际也没有什么用处。")]),_._v(" "),e("p",[e("strong",[_._v("真并行传输 — 浏览器优化策略")])]),_._v(" "),e("p",[_._v("HTTP1.1支持管道化，但是服务器也必须进行逐个响应的送回，这个是很大的一个缺陷。实际上，现阶段的浏览器厂商采取了另外一种做法，它允许我们打开"),e("code",[_._v("多个TCP")]),_._v("的"),e("code",[_._v("会话")])]),_._v(" "),e("p",[e("strong",[_._v("缓存处理 — 强缓存、协商缓存，启发式缓存（新增）")])]),_._v(" "),e("p",[_._v("此外，HTTP1.1还加入了"),e("code",[_._v("缓存处理")]),_._v("（强缓存和协商缓存），新的字段如"),e("code",[_._v("cache-control")]),_._v("，支持"),e("code",[_._v("断点传输")]),_._v("，以及增加了"),e("code",[_._v("Host字段")]),_._v("（使得一个服务器能够用来创建多个Web站点）")]),_._v(" "),e("h4",{attrs:{id:"_3-http2-0"}},[_._v("3. HTTP2.0")]),_._v(" "),e("p",[_._v("HTTP/2 相比于 HTTP/1，可以说是大幅度提高了网页的性能。")]),_._v(" "),e("p",[_._v("在 HTTP/1 中，为了性能考虑，我们会引入雪碧图、将小图内联、使用多个域名等等的方式。这一切都是因为"),e("code",[_._v("浏览器")]),_._v("限制了"),e("code",[_._v("同一个域名")]),_._v("下的"),e("code",[_._v("请求数量")]),_._v("（"),e("code",[_._v("Chrome")]),_._v(" 下一般是限制"),e("code",[_._v("六个连接")]),_._v("），当页面中需要请求很多资源的时候，"),e("code",[_._v("队头阻塞")]),_._v("（Head of line blocking）会导致在达到"),e("code",[_._v("最大请求数量")]),_._v("时，"),e("code",[_._v("剩余")]),_._v("的资源需要"),e("code",[_._v("等待")]),_._v("其他资源请求完成后才能发起请求。")]),_._v(" "),e("p",[_._v("在 HTTP/2 中引入了"),e("code",[_._v("多路复用")]),_._v("的技术，这个技术可以只通过一个 TCP 连接就可以传输所有的请求数据。多路复用很好的解决了浏览器限制同一个域名下的请求数量的问题，同时也接更容易实现全速传输，毕竟新开一个 TCP 连接都需要慢慢提升传输速度。")]),_._v(" "),e("p",[e("strong",[_._v("二进制分帧")])]),_._v(" "),e("p",[_._v("HTTP/2 中所有加强性能的"),e("code",[_._v("核心")]),_._v("点在于此。在之前的 HTTP 版本中，我们是通过"),e("code",[_._v("文本")]),_._v("的方式"),e("code",[_._v("传输数据")]),_._v("。在 HTTP/2 中引入了新的"),e("code",[_._v("编码机制")]),_._v("，所有"),e("code",[_._v("传输的数据")]),_._v("都会被"),e("code",[_._v("分割")]),_._v("，并采用"),e("code",[_._v("二进制格式编码")]),_._v("。")]),_._v(" "),e("p",[e("strong",[_._v("多路复用（链接共享）— 真并行传输")])]),_._v(" "),e("p",[e("code",[_._v("流（stream）")]),_._v("：已建立连接上的双向字节流。"),e("br"),_._v(" "),e("code",[_._v("消息")]),_._v("：与逻辑消息对应的完整的一系列数据帧。"),e("br"),_._v(" "),e("code",[_._v("帧（frame）")]),_._v("：帧代表着最小的数据单位，每个帧会标识出该帧属于哪个流，流也就是多个帧组成的数据流")]),_._v(" "),e("p",[_._v("所有HTTP2.0通信都在"),e("code",[_._v("一个TCP连接")]),_._v("上完成，这个连接可以承载任意流量的双向数据流。")]),_._v(" "),e("p",[_._v("多路复用就是在一个 TCP 连接中可以存在"),e("code",[_._v("多条流")]),_._v("。换句话说，也就是可以发送"),e("code",[_._v("多个请求")]),_._v("，对端可以通过"),e("code",[_._v("帧")]),_._v("中的"),e("code",[_._v("标识")]),_._v("知道属于哪个"),e("code",[_._v("请求")]),_._v("。通过这个技术，可以避免 HTTP 旧版本中的队头阻塞问题，极大的提高传输性能。")]),_._v(" "),e("p",[_._v("可见，HTTP2.0实现了真正的并行传输，它能够在一个TCP上进行任意数量的HTTP请求。而这个强大的功能基于"),e("code",[_._v("二级制分帧")]),_._v("的特性。")]),_._v(" "),e("p",[e("strong",[_._v("头部压缩")])]),_._v(" "),e("p",[_._v("在 HTTP/1 中，我们使用"),e("code",[_._v("文本")]),_._v("的形式传输 "),e("code",[_._v("header")]),_._v("，在 header 携带 "),e("code",[_._v("cookie")]),_._v(" 的情况下，可能每次都需要"),e("code",[_._v("重复传输")]),_._v("几百到几千的"),e("code",[_._v("字节")]),_._v("。")]),_._v(" "),e("p",[_._v("在 HTTP /2 中，使用了 "),e("code",[_._v("HPACK")]),_._v(" 压缩格式对传输的 header 进行"),e("code",[_._v("编码")]),_._v("，减少了 header 的大小。并在"),e("code",[_._v("两端")]),_._v("维护了"),e("code",[_._v("索引表")]),_._v("，用于记录出现过的 "),e("code",[_._v("header")]),_._v(" ，后面在传输过程中就可以传输"),e("code",[_._v("已经记录")]),_._v("过的 header 的"),e("code",[_._v("键名")]),_._v("，对端收到数据后就可以通过"),e("code",[_._v("键名")]),_._v("找到对应的"),e("code",[_._v("值")]),_._v("。")]),_._v(" "),e("p",[e("strong",[_._v("服务器推送")])]),_._v(" "),e("p",[_._v("在 HTTP/2 中，服务端可以在客户端某个请求后，"),e("code",[_._v("主动推送")]),_._v("其他资源。")]),_._v(" "),e("p",[_._v("可以想象以下情况，某些资源客户端是一定会请求的，这时就可以采取服务端 push 的技术，提前给客户端推送必要的资源，这样就可以相对减少一点延迟时间。当然在浏览器兼容的情况下你也可以使用 prefetch 。")]),_._v(" "),e("h4",{attrs:{id:"_4-http3-0"}},[_._v("4.HTTP3.0")]),_._v(" "),e("p",[_._v("虽然 HTTP/2 解决了很多之前旧版本的问题，但是它还是存在一个巨大的问题，虽然这个问题并不是它本身造成的，而是底层支撑的 TCP 协议的问题。")]),_._v(" "),e("p",[_._v("因为 "),e("code",[_._v("HTTP/2")]),_._v(" 使用了"),e("code",[_._v("多路复用")]),_._v("，一般来说"),e("code",[_._v("同一域名")]),_._v("下只需要使用"),e("code",[_._v("一个 TCP 连接")]),_._v("。当这个"),e("code",[_._v("连接")]),_._v("中出现了"),e("code",[_._v("丢包")]),_._v("的情况，那就会导致 HTTP/2 的表现情况反倒"),e("code",[_._v("不如")]),_._v("HTTP/1 了。")]),_._v(" "),e("p",[_._v("因为在出现"),e("code",[_._v("丢包")]),_._v("的"),e("code",[_._v("情况下")]),_._v("，整个 "),e("code",[_._v("TCP")]),_._v(" 都要开始"),e("code",[_._v("等待重传")]),_._v("，也就导致了"),e("code",[_._v("后面")]),_._v("的"),e("code",[_._v("所有数据")]),_._v("都"),e("code",[_._v("被阻塞")]),_._v("了。但是对于 "),e("code",[_._v("HTTP/1")]),_._v(" 来说，可以"),e("code",[_._v("开启多个 TCP 连接")]),_._v("，出现这种情况反到只会影响其中一个连接，剩余的 TCP 连接还可以正常传输数据。")]),_._v(" "),e("p",[_._v("那么可能就会有人考虑到去修改 TCP 协议，其实这已经是一件不可能完成的任务了。因为 TCP 存在的时间实在太长，已经充斥在各种设备中，并且这个协议是由操作系统实现的，更新起来不大现实。")]),_._v(" "),e("p",[_._v("基于这个原因，"),e("code",[_._v("Google")]),_._v(" 就更起炉灶搞了一个基于 "),e("code",[_._v("UDP 协议")]),_._v("的 "),e("code",[_._v("QUIC 协议")]),_._v("，并且使用在了 HTTP/3 上，当然 HTTP/3 之前名为 "),e("code",[_._v("HTTP-over-QUIC")]),_._v("，从这个名字中我们也可以发现，HTTP/3 最大的改造就是使用了 QUIC，接下来我们就来学习关于这个协议的内容。")]),_._v(" "),e("p",[e("strong",[_._v("Quic")])]),_._v(" "),e("p",[_._v("早期Quic协议，存在IETF和Google两个版本，直到它被正式命名为HTTP3.0")]),_._v(" "),e("p",[_._v("IETF的QUIC工作小组创造了QUIC传输协议。QUIC是一个使用UDP来替代TCP的协议。最初的时候，Google开始助力QUIC，其后QUIC更多地被叫做“HTTP/2-encrypted-over-UDP “。")]),_._v(" "),e("p",[_._v("社区中的人们已经使用非正式名称如iQUIC和gQUIC来指代这些不同版本的协议，以将QUIC协议与IETF和Google分开（因为它们在细节上差异很大）。通过“iQUIC”发送HTTP的协议被称为“HQ”（HTTP-over-QUIC）很长一段时间。")]),_._v(" "),e("p",[_._v("2018年11月7日，Litespeed的Dmitri宣布他们和Facebook已经成功地完成了两个HTTP/3实现之间的第一次互操作。Mike Bihop在该主题的HTTPBIS会话中的后续介绍可以在这里看到。会议结束时达成共识称新名称是HTTP/3！")]),_._v(" "),e("p",[_._v("之前我们学习过 UDP 协议的内容，知道这个协议虽然效率很高，但是并不是那么的可靠。QUIC 虽然基于 UDP，但是在原本的基础上新增了很多功能，比如多路复用、0-RTT、使用 TLS1.3 加密、流量控制、有序交付、重传等等功能。这里我们就挑选几个重要的功能学习下这个协议的内容。")]),_._v(" "),e("p",[e("strong",[_._v("多路复用")])]),_._v(" "),e("p",[_._v("虽然 HTTP/2 支持了多路复用，但是 TCP 协议终究是没有这个功能的。QUIC "),e("code",[_._v("原生就实现")]),_._v("了这个功能，并且传输的"),e("code",[_._v("单个数据流")]),_._v("可以保证"),e("code",[_._v("有序交付")]),_._v("且"),e("code",[_._v("不会影响其他的数据流")]),_._v("，这样的技术就解决了之前 TCP 存在的问题。")]),_._v(" "),e("p",[_._v("并且 QUIC "),e("code",[_._v("在移动端")]),_._v("的表现也会比 TCP 好。因为 TCP 是基于 "),e("code",[_._v("IP")]),_._v(" 和"),e("code",[_._v("端口")]),_._v("去识别连接的，这种方式在多变的移动端网络环境下是很脆弱的。但是 QUIC 是通过 ID 的方式去识别一个连接，不管你网络环境如何变化，只要 ID 不变，就能迅速重连上")]),_._v(" "),e("h4",{attrs:{id:"总结"}},[_._v("总结")]),_._v(" "),e("p",[e("strong",[_._v("HTTP 1.0")])]),_._v(" "),e("ul",[e("li",[_._v("无状态，无连接")]),_._v(" "),e("li",[_._v("短连接：每次发送请求都要重新建立tcp请求，即三次握手，非常浪费性能")]),_._v(" "),e("li",[_._v("无host头域，也就是http请求头里的host")]),_._v(" "),e("li",[_._v("不允许断点续传，而且不能只传输对象的一部分，要求传输整个对象")])]),_._v(" "),e("p",[e("strong",[_._v("HTTP 1.1")])]),_._v(" "),e("ul",[e("li",[_._v("长连接，流水线，使用connection:keep-alive使用长连接")]),_._v(" "),e("li",[_._v("请求管道化")]),_._v(" "),e("li",[_._v("增加缓存处理（新的字段如cache-control）")]),_._v(" "),e("li",[_._v("增加Host字段，支持断点传输等")]),_._v(" "),e("li",[_._v("由于长连接会给服务器造成压力")])]),_._v(" "),e("p",[e("strong",[_._v("HTTP 2.0")])]),_._v(" "),e("ul",[e("li",[_._v("二进制分帧")]),_._v(" "),e("li",[_._v("头部压缩，双方各自维护一个header的索引表，使得不需要直接发送值，通过发送key缩减头部大小")]),_._v(" "),e("li",[_._v("多路复用（或连接共享），使用多个stream，每个stream又分帧传输，使得一个tcp连接能够处理多个http请求")]),_._v(" "),e("li",[_._v("服务器推送（Sever push）")])]),_._v(" "),e("p",[e("strong",[_._v("HTTP 3.0")])]),_._v(" "),e("ul",[e("li",[_._v("基于google的QUIC协议，而quic协议是使用udp实现的")]),_._v(" "),e("li",[_._v("减少了tcp三次握手时间，以及tls握手时间")]),_._v(" "),e("li",[_._v("解决了http 2.0中前一个stream丢包导致后一个stream被阻塞的问题")]),_._v(" "),e("li",[_._v("优化了重传策略，重传包和原包的编号不同，降低后续重传计算的消耗")]),_._v(" "),e("li",[_._v("连接迁移，不再用tcp四元组确定一个连接，而是用一个64位随机数来确定这个连接")]),_._v(" "),e("li",[_._v("更合适的流量控制")]),_._v(" "),e("li",[_._v("基于UDP实现")]),_._v(" "),e("li",[_._v("0RTT建连")]),_._v(" "),e("li",[_._v("基于UDP的多路复用")]),_._v(" "),e("li",[_._v("加密认证的报文")]),_._v(" "),e("li",[_._v("向前纠错机制")])]),_._v(" "),e("p",[e("a",{attrs:{href:"https://blog.csdn.net/qq_42872073/article/details/112836905",target:"_blank",rel:"noopener noreferrer"}},[_._v("详情1"),e("OutboundLink")],1)]),_._v(" "),e("p",[e("a",{attrs:{href:"https://blog.csdn.net/ailunlee/article/details/97831912",target:"_blank",rel:"noopener noreferrer"}},[_._v("详情2"),e("OutboundLink")],1)]),_._v(" "),e("h3",{attrs:{id:"_4-2-http和tcp的队头阻塞"}},[_._v("4.2 http和tcp的队头阻塞")]),_._v(" "),e("p",[e("strong",[_._v("tcp队头阻塞")])]),_._v(" "),e("p",[_._v("在出现"),e("code",[_._v("丢包")]),_._v("的"),e("code",[_._v("情况下")]),_._v("，整个 "),e("code",[_._v("TCP")]),_._v(" 都要开始"),e("code",[_._v("等待重传")]),_._v("，也就导致了"),e("code",[_._v("后面")]),_._v("的"),e("code",[_._v("所有数据")]),_._v("都"),e("code",[_._v("被阻塞")]),_._v("了")]),_._v(" "),e("p",[e("strong",[_._v("http 1.0 队头阻塞")])]),_._v(" "),e("p",[_._v("由于HTTP1.0规定下一个请求必须在前一个请求响应到达之后才能发送，假设前一个请求响应一直不到达，那么下一个请求就不发送，后面的请求就阻塞了。")]),_._v(" "),e("p",[e("strong",[_._v("http 1.1 管道化阻塞")])]),_._v(" "),e("p",[_._v("HTTP管道化要求服务端必须按照请求发送的顺序返回响应，那如果一个响应返回延迟了，那么其后续的响应都会被延迟，直到队头的响应送达。")]),_._v(" "),e("p",[e("strong",[_._v("如何解决HTTP队头阻塞")])]),_._v(" "),e("p",[_._v("对于HTTP1.1中"),e("code",[_._v("管道化")]),_._v("导致的"),e("code",[_._v("请求/响应")]),_._v("级别的队头阻塞，可以使用"),e("code",[_._v("HTTP2")]),_._v("解决。")]),_._v(" "),e("p",[_._v("HTTP2不使用管道化的方式，而是引入了"),e("code",[_._v("帧、消息和数据流")]),_._v("等概念，每个请求/响应被称为消息，每个消息都被拆分成若干个帧进行传输，每个帧都分配一个序号。每个帧在传输是属于一个数据流，而一个连接上可以存在多个流，各个帧在流和连接上独立传输，到达之后在组装成消息，这样就避免了请求/响应阻塞。")]),_._v(" "),e("p",[_._v("当然，即使使用HTTP2，如果HTTP2底层使用的是TCP协议，仍可能应该丢包重传出现TCP队头阻塞。")]),_._v(" "),e("p",[e("strong",[_._v("如何解决TCP队头阻塞")])]),_._v(" "),e("p",[_._v("TCP中的队头阻塞的产生是由TCP自身的实现机制决定的，无法避免。想要在应用程序当中避免TCP队头阻塞带来的影响，只有舍弃TCP协议，使用http3.0。")]),_._v(" "),e("p",[_._v("http3.0使用的是google推出的quic协议，避免了TCP中的队头阻塞，因为它根本不使用TCP协议，而是在UDP协议的基础上实现了可靠传输。而UDP是面向数据报的协议，数据报之间不会有阻塞约束。")]),_._v(" "),e("h3",{attrs:{id:"_4-1-http2问答"}},[_._v("4.1 http2问答")]),_._v(" "),e("p",[_._v("【腾讯】\nhttp2 都有哪些应用，多路复用和 1.1 版本 keep-alive 有什么区别和联系，如果 http1.1 服务端需要按顺序处理请求，那为什么有的时候在一个页面里看图片，有时下面的图片会先出来，http pipeline 有了解吗，http 流传输有了解吗")]),_._v(" "),e("h3",{attrs:{id:"_4-2-tcp-三次握手"}},[_._v("4.2 TCP 三次握手")]),_._v(" "),e("p",[_._v("【aptap】\n"),e("a",{attrs:{href:"https://juejin.cn/post/6844904191018680333#heading-6",target:"_blank",rel:"noopener noreferrer"}},[_._v("link"),e("OutboundLink")],1)]),_._v(" "),e("h3",{attrs:{id:"_4-2-一个-tcp-可以发起多少个-http请求-http2-0-有限制吗"}},[_._v("4.2 一个 tcp 可以发起多少个 http请求？http2.0 有限制吗")]),_._v(" "),e("p",[e("a",{attrs:{href:"https://blog.csdn.net/john1337/article/details/104588310",target:"_blank",rel:"noopener noreferrer"}},[_._v("详情"),e("OutboundLink")],1)]),_._v(" "),e("h3",{attrs:{id:"_4-3-https-为什么-https-可以防中间人攻击"}},[_._v("4.3  https，为什么 https 可以防中间人攻击")]),_._v(" "),e("p",[_._v("【美团,金山】")]),_._v(" "),e("p",[e("strong",[_._v("什么是https")])]),_._v(" "),e("p",[_._v("HTTPS，是以"),e("code",[_._v("安全")]),_._v("为"),e("code",[_._v("目标")]),_._v("的"),e("code",[_._v("HTTP通道")]),_._v("，简单讲是HTTP的安全版。即HTTP下加入"),e("code",[_._v("SSL")]),_._v("层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL")]),_._v(" "),e("p",[e("strong",[_._v("Https的作用")])]),_._v(" "),e("ul",[e("li",[e("strong",[_._v("内容加密")]),_._v(" 建立一个信息安全通道，来保证数据传输的安全；")]),_._v(" "),e("li",[e("strong",[_._v("身份认证")]),_._v(" 确认网站的真实性")]),_._v(" "),e("li",[e("strong",[_._v("数据完整性")]),_._v(" 防止内容被第三方冒充或者篡改")])]),_._v(" "),e("p",[e("strong",[_._v("HTTPS和HTTP的区别")])]),_._v(" "),e("ul",[e("li",[_._v("https协议需要到"),e("code",[_._v("CA")]),_._v("申请证书，一般免费证书很少，需要"),e("code",[_._v("交费")]),_._v("。")]),_._v(" "),e("li",[_._v("http是"),e("code",[_._v("超文本传输协议")]),_._v("，信息是"),e("code",[_._v("明文")]),_._v("传输；https 则是具有"),e("code",[_._v("安全性")]),_._v("的"),e("code",[_._v("ssl加密传输协议")]),_._v("。")]),_._v(" "),e("li",[_._v("http和https使用的是完全不同的连接方式，用的端口也不一样，前者是"),e("code",[_._v("80")]),_._v("，后者是"),e("code",[_._v("443")]),_._v("。")]),_._v(" "),e("li",[_._v("http的连接很简单，是"),e("code",[_._v("无状态")]),_._v("的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议"),e("code",[_._v("安全")]),_._v("。")])]),_._v(" "),e("p",[e("a",{attrs:{href:"https://blog.csdn.net/wx_962464/article/details/51043069",target:"_blank",rel:"noopener noreferrer"}},[_._v("详情"),e("OutboundLink")],1)]),_._v(" "),e("p",[e("strong",[_._v("什么是中间人攻击")])]),_._v(" "),e("p",[e("a",{attrs:{href:"https://netsecurity.51cto.com/art/202007/621637.htm",target:"_blank",rel:"noopener noreferrer"}},[_._v("详情》"),e("OutboundLink")],1)]),_._v(" "),e("p",[_._v("指"),e("code",[_._v("攻击者")]),_._v("与通讯的"),e("code",[_._v("两端")]),_._v("分别创建"),e("code",[_._v("独立的联系")]),_._v("，并交换其所收到的数据，使通讯的两端认为他们正在通过一个"),e("code",[_._v("私密的连接")]),_._v("与对方 "),e("code",[_._v("直接对话")]),_._v("，但事实上整个会话都被攻击者"),e("code",[_._v("完全控制")]),_._v("。\n"),e("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/292e23dcf2a6d6d43c1f60f3c13cf1da.png",alt:"image.png"}})]),_._v(" "),e("h3",{attrs:{id:"_13-https一定是安全的吗"}},[_._v("13.  HTTPS一定是安全的吗？")]),_._v(" "),e("p",[_._v("不一定。")]),_._v(" "),e("p",[_._v("现在我们是使用ca公钥对ca机构颁发的ca数字证书进行验证，基于对于CA的信任机制。")]),_._v(" "),e("p",[_._v("所以这个信任机制有问题的话，那就可能不安全")]),_._v(" "),e("p",[_._v("第一个方面，\n那么ca机构是否存在是假的吗？\n会存在，但是一般不会发生，因为公司一般去申请ca证书的时候，都会选择正规的CA机构。几乎不可能存在去假的CA机构进行验证。\n另外，虽然正规CA的公钥公开，即使这中间人解开了CA数字证书，也没法改变数据之后进行私钥加密，因为“中间人攻击”的中间人不会得到正规CA的私钥。\n只有公司去了假了CA机构申请，才会有私钥。")]),_._v(" "),e("p",[_._v("第二个方面\n数字证书不一定用CA机构颁发的，数字证书是可以自定义的。一般这种情况，需要手动安装数字证书，获取这个证书一般是去官网下载。\n那么获取数字证书的时候就有可能出问题。\n有可能下载数字证书的时候，被劫持，替换为中间人的数字证书。这样，以后传输数据的时候，就会发送中间人攻击了。")]),_._v(" "),e("h3",{attrs:{id:"_12-tls握手过程"}},[_._v("12. TLS握手过程")]),_._v(" "),e("p",[_._v("TLS 握手是启动 HTTPS 通信的过程，类似于 TCP 建立连接时的三次握手。 在 TLS 握手的过程中，通信双方交换消息以相互验证，相互确认，并确立它们所要使用的加密算法以及会话密钥 (用于对称加密的密钥)。可以说，TLS 握手是 HTTPS 通信的基础部分。")]),_._v(" "),e("ul",[e("li",[_._v("商定双方通信所使用的的 TLS 版本 (例如 TLS1.0, 1.2, 1.3等等)；")]),_._v(" "),e("li",[_._v("确定双方所要使用的密码组合；")]),_._v(" "),e("li",[_._v("客户端通过服务器的公钥和数字证书 (上篇文章已有介绍)上的数字签名验证服务端的身份；")]),_._v(" "),e("li",[_._v("生成会话密钥，该密钥将用于握手结束后的对称加密。")])]),_._v(" "),e("p",[_._v("TLS的握手过程？哪个环节用到了私钥？")]),_._v(" "),e("p",[e("a",{attrs:{href:"https://segmentfault.com/a/1190000021559557",target:"_blank",rel:"noopener noreferrer"}},[_._v("详情"),e("OutboundLink")],1)]),_._v(" "),e("h3",{attrs:{id:"_44-http缓存"}},[_._v("44. HTTP缓存")]),_._v(" "),e("p",[_._v("【美团，映客直播】")]),_._v(" "),e("p",[_._v("强缓存和弱缓存"),e("a",{attrs:{href:"https://blog.csdn.net/goutinga/article/details/114221443",target:"_blank",rel:"noopener noreferrer"}},[_._v("详情>"),e("OutboundLink")],1)]),_._v(" "),e("h3",{attrs:{id:"_4-5-chrome-浏览器最多同时加载多少个资源-那如果想同时加载更多资源应该怎么办"}},[_._v("4.5 chrome 浏览器最多同时加载多少个资源，那如果想同时加载更多资源应该怎么办")]),_._v(" "),e("p",[_._v("6个")]),_._v(" "),e("p",[e("strong",[_._v("为什么浏览器会限制并行请求数量？")])]),_._v(" "),e("ul",[e("li",[_._v("浏览器发出网络请求需要新开线程，而且可以发出请求的端口数量有限，从开销角度考虑不可能无限发出并发请求；")]),_._v(" "),e("li",[_._v("此外如果浏览器不作限制，大量的请求同时发至服务器，也可能超过服务器的处理并发请求的数量阈值（针对单个 IP），从而导致请求失败。")])]),_._v(" "),e("p",[e("strong",[_._v("解决方法：")])]),_._v(" "),e("ol",[e("li",[e("p",[_._v("多个请求使用不能的域名，将静态资源放置于 CDN。")])]),_._v(" "),e("li",[e("p",[_._v("使用WebSocket协议，主流的浏览器对WebSocket连接并发数量的限制都远超6个。")])]),_._v(" "),e("li",[e("p",[_._v("使用HTTP/2.0，理论上HTTP/2.0协议支持在同一个TCP连接上发送无限个HTTP请求，且这些请求的生命期可以重叠。（通过流来传递）")])]),_._v(" "),e("li",[e("p",[_._v("使用懒加载，一些图片可以等到出现在视图区才加载")])])]),_._v(" "),e("p",[e("a",{attrs:{href:"https://www.zhihu.com/question/20474326/answer/15696641",target:"_blank",rel:"noopener noreferrer"}},[_._v("参考"),e("OutboundLink")],1)]),_._v(" "),e("h3",{attrs:{id:"_4-5-离线存储"}},[_._v("4.5 离线存储")]),_._v(" "),e("p",[_._v("【网易传媒】")]),_._v(" "),e("h3",{attrs:{id:"_4-5-websocket-介绍一下-它和-http-有什么关系"}},[_._v("4.5 Websocket 介绍一下，它和 http 有什么关系")]),_._v(" "),e("p",[_._v("【金山】")]),_._v(" "),e("p",[_._v("我们已经有了 HTTP 协议，为什么还需要另一个协议？它能带来什么好处？")]),_._v(" "),e("p",[_._v("答案很简单，因为 HTTP 协议有一个缺陷：通信只能由客户端发起。")]),_._v(" "),e("p",[_._v("举例来说，我们想了解今天的天气，只能是客户端向服务器发出请求，服务器返回查询结果。HTTP 协议做不到服务器主动向客户端推送信息。（http3.0好像支持了）")]),_._v(" "),e("p",[_._v("WebSocket 协议在2008年诞生，2011年成为国际标准。所有浏览器都已经支持了。")]),_._v(" "),e("p",[_._v("它的最大特点就是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话，属于服务器推送技术的一种。")]),_._v(" "),e("p",[_._v("其他特点包括：")]),_._v(" "),e("p",[_._v("（1）建立在 TCP 协议之上，服务器端的实现比较容易。")]),_._v(" "),e("p",[_._v("（2）与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。")]),_._v(" "),e("p",[_._v("（3）数据格式比较轻量，性能开销小，通信高效。")]),_._v(" "),e("p",[_._v("（4）可以发送文本，也可以发送二进制数据。")]),_._v(" "),e("p",[_._v("（5）没有同源限制，客户端可以与任意服务器通信。")]),_._v(" "),e("p",[_._v("（6）协议标识符是"),e("code",[_._v("ws")]),_._v("（如果加密，则为"),e("code",[_._v("wss")]),_._v("），服务器网址就是 URL。")]),_._v(" "),e("p",[e("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2017/05/websocket.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("link"),e("OutboundLink")],1)]),_._v(" "),e("h3",{attrs:{id:"_4-8-你们的-rpc-用的哪个框架-grpc-和-thrift-的区别有了解么-protobuf-有了解吗"}},[_._v("4.8 你们的 RPC 用的哪个框架，grpc 和 thrift 的区别有了解么，protobuf 有了解吗")]),_._v(" "),e("p",[_._v("【网易灵犀】")]),_._v(" "),e("h3",{attrs:{id:"_4-8-一个页面的性能指标都有哪些-你是如何做监控的-如何监控-node-服务的性能监控"}},[_._v("4.8 一个页面的性能指标都有哪些，你是如何做监控的，如何监控 node 服务的性能监控")]),_._v(" "),e("p",[_._v("【网易灵犀】")]),_._v(" "),e("h3",{attrs:{id:"_4-9-localstorage的会不会出现不同项目的key覆盖别人的key的问题-如何解决"}},[_._v("4.9 localstorage的会不会出现不同项目的key覆盖别人的key的问题，如何解决")]),_._v(" "),e("p",[_._v("【百度】")]),_._v(" "),e("p",[_._v("可能会出现，如果项目部署的地址的同源的话")]),_._v(" "),e("p",[_._v("建一个对象，将存储的本地数据放在对象里面属性里面，属性的key为项目名，value就是我们要存储的值。通过项目名来隔离。")]),_._v(" "),e("h3",{attrs:{id:"_4-10-浏览器发请求和node发请求都有什么区别-浏览器都为发请求做了哪些默认行为"}},[_._v("4.10 浏览器发请求和node发请求都有什么区别，浏览器都为发请求做了哪些默认行为")]),_._v(" "),e("p",[_._v("【大疆】")]),_._v(" "),e("h3",{attrs:{id:"_4-11-如何理解线程和进程"}},[_._v("4.11 如何理解线程和进程")]),_._v(" "),e("p",[_._v("【大疆】")]),_._v(" "),e("p",[e("code",[_._v("进程")]),_._v("就好比工厂的车间，它代表CPU所能处理的单个任务。 "),e("code",[_._v("进程")]),_._v("之间相互独立，任一时刻，CPU总是运行一个"),e("code",[_._v("进程")]),_._v("，其他"),e("code",[_._v("进程")]),_._v("处于非运行状态。 CPU使用时间片轮转进度算法来实现同时运行多个"),e("code",[_._v("进程")]),_._v("。")]),_._v(" "),e("p",[_._v("浏览器没打开一个标签页就是一个进程")]),_._v(" "),e("ul",[e("li",[e("code",[_._v("进程")]),_._v("是cpu资源分配的最小单位（是能拥有资源和独立运行的最小单位）")]),_._v(" "),e("li",[e("code",[_._v("线程")]),_._v("是cpu调度的最小单位（线程是建立在进程的基础上的一次程序运行单位，一个进程中可以有多个线程）")]),_._v(" "),e("li",[_._v("不同"),e("code",[_._v("进程")]),_._v("之间也可以通信，不过代价较大")]),_._v(" "),e("li",[e("code",[_._v("单线程")]),_._v("与"),e("code",[_._v("多线程")]),_._v("，都是指在一个"),e("code",[_._v("进程")]),_._v("内的单和多")])]),_._v(" "),e("p",[e("a",{attrs:{href:"https://juejin.cn/post/6844903919789801486",target:"_blank",rel:"noopener noreferrer"}},[_._v("详情"),e("OutboundLink")],1)]),_._v(" "),e("h3",{attrs:{id:"_4-13-浏览器进程模型有了解吗"}},[_._v("4.13 浏览器进程模型有了解吗")]),_._v(" "),e("p",[_._v("【腾讯音乐】")]),_._v(" "),e("h3",{attrs:{id:"_4-12-浏览器都有过哪些了解-内核都有哪些-chrome浏览器开启一个页签时开启了多少个进程-对应开启了哪些线程"}},[_._v("4.12  浏览器都有过哪些了解，内核都有哪些，chrome浏览器开启一个页签时开启了多少个进程，对应开启了哪些线程")]),_._v(" "),e("p",[_._v("【360】")]),_._v(" "),e("h3",{attrs:{id:"_4-13-讲讲状态码301-302-307的区别"}},[_._v("4.13 讲讲状态码301/302/307的区别；")]),_._v(" "),e("p",[_._v("【字节】")]),_._v(" "),e("p",[e("a",{attrs:{href:"https://www.cnblogs.com/goloving/p/14087235.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("详情>"),e("OutboundLink")],1)]),_._v(" "),e("h3",{attrs:{id:"_10-1-浏览器跨域的方式有哪些-如何解决前端跨域"}},[_._v("10.1 浏览器跨域的方式有哪些？如何解决前端跨域；")]),_._v(" "),e("p",[_._v("【网易传媒，字节，虾皮】")]),_._v(" "),e("p",[_._v("协议，域名，端口不同即跨域")]),_._v(" "),e("p",[e("code",[_._v("http://ip:port")]),_._v(" 与指向该 ip:port 的域名是同域吗？")]),_._v(" "),e("p",[_._v("一个ip可以对应多个域名，但域名和对应的ip是不同域的")]),_._v(" "),e("p",[e("a",{attrs:{href:"https://www.imooc.com/article/291931",target:"_blank",rel:"noopener noreferrer"}},[_._v("详情>"),e("OutboundLink")],1)]),_._v(" "),e("h3",{attrs:{id:"_10-浏览器刷新频率"}},[_._v("10. 浏览器刷新频率？")]),_._v(" "),e("p",[_._v("一般为：60赫兹")]),_._v(" "),e("h3",{attrs:{id:"_8-cdn的原理"}},[_._v("8. CDN的原理")]),_._v(" "),e("p",[e("strong",[_._v("1. 什么是CDN？")])]),_._v(" "),e("p",[_._v("CDN是构建在网络之上的"),e("code",[_._v("内容分发网络")]),_._v("，依靠部署在各地的"),e("code",[_._v("边缘服务器")]),_._v("，使用户"),e("code",[_._v("就近获取")]),_._v("所需内容，降低网络拥塞，提高用户访问"),e("code",[_._v("响应速度")]),_._v("和"),e("code",[_._v("命中率")]),_._v("。")]),_._v(" "),e("p",[_._v("CDN的关键技术主要有内容存储和分发技术。")]),_._v(" "),e("p",[e("strong",[_._v("2. 基本原理")])]),_._v(" "),e("p",[_._v("CDN的基本原理是广泛采用各种"),e("code",[_._v("缓存服务器")]),_._v("，将这些缓存服务器分布到用户"),e("code",[_._v("访问相对集中")]),_._v("的"),e("code",[_._v("地区")]),_._v("或"),e("code",[_._v("网络")]),_._v("中，在用户访问网站时，利用"),e("code",[_._v("全局负载")]),_._v("技术将用户的访问"),e("code",[_._v("指向距离最近")]),_._v("的缓存服务器上，由缓存服务器"),e("code",[_._v("直接响应")]),_._v("用户请求。")]),_._v(" "),e("p",[e("strong",[_._v("3.基本思路")])]),_._v(" "),e("p",[_._v("基本思路是尽可能"),e("code",[_._v("避开")]),_._v("互联网上有可能"),e("code",[_._v("影响数据传输速度")]),_._v("和"),e("code",[_._v("稳定性")]),_._v("的"),e("code",[_._v("瓶颈")]),_._v("和"),e("code",[_._v("环节")]),_._v("，使内容传输的更快、更稳定。")]),_._v(" "),e("p",[_._v("通过在"),e("code",[_._v("网络各处")]),_._v("放置"),e("code",[_._v("节点服务器")]),_._v("所构成的在"),e("code",[_._v("现有的")]),_._v("互联网基础之上的一层"),e("code",[_._v("智能虚拟网络")]),_._v("，CDN系统能够实时地根据网络流量和各节点的连接、负载状况以及"),e("code",[_._v("到用户的距离")]),_._v("和"),e("code",[_._v("响应时间")]),_._v("等综合信息将用户的请求"),e("code",[_._v("重新导向")]),_._v("离用户"),e("code",[_._v("最近")]),_._v("的"),e("code",[_._v("服务节点")]),_._v("上。")]),_._v(" "),e("p",[_._v("其目的是使用户可就近取得所需内容，解决 Internet网络拥挤的状况，提高用户访问网站的响应速度。")]),_._v(" "),e("p",[e("strong",[_._v("4 . 服务模式")])]),_._v(" "),e("p",[_._v("内容分发网络(CDN)是一种"),e("code",[_._v("新型网络构建方式")]),_._v("，它是为能在"),e("code",[_._v("传统的IP网")]),_._v("发布"),e("code",[_._v("宽带丰富媒体")]),_._v("而特别优化的"),e("code",[_._v("网络覆盖层")]),_._v("；而从广义的角度，CDN代表了一种基于"),e("code",[_._v("质量")]),_._v("与"),e("code",[_._v("秩序")]),_._v("的网络服务模式。")]),_._v(" "),e("p",[_._v("简单地说，内容分发网络(CDN)是一个经"),e("code",[_._v("策略性部署")]),_._v("的"),e("code",[_._v("整体系统")]),_._v("，包括"),e("code",[_._v("分布式存储")]),_._v("、"),e("code",[_._v("负载均衡")]),_._v("、"),e("code",[_._v("网络请求的重定向")]),_._v("和"),e("code",[_._v("内容管理")]),_._v("4个要件，而"),e("strong",[_._v("内容管理")]),_._v("和"),e("strong",[_._v("全局的网络流量管理")]),_._v("(Traffic Management)是CDN的"),e("code",[_._v("核心所在")]),_._v("。通过用户就近性和服务器负载的判断，CDN确保内容以一种极为高效的方式为用户的请求提供服务。")]),_._v(" "),e("p",[_._v('总的来说，内容服务基于缓存服务器，也称作代理缓存(Surrogate)，它位于网络的边缘，距用户仅有"一跳"(Single Hop)之遥。同时，代理缓存是内容提供商源服务器（通常位于CDN服务提供商的数据中心）的一个透明镜像。这样的架构使得CDN服务提供商能够代表他们客户，即内容供应商，向最终用户提供尽可能好的体验，而这些用户是不能容忍请求响应时间有任何延迟的。')]),_._v(" "),e("p",[e("strong",[_._v("5.关键技术")])]),_._v(" "),e("p",[e("strong",[_._v("（1）内容发布")]),_._v("：它借助于建立索引、缓存、流分裂、组播（Multicast）等技术，将内容发布或投递到距离用户最近的远程服务点（POP）处；")]),_._v(" "),e("p",[e("strong",[_._v("（2）内容路由")]),_._v("：它是整体性的网络负载均衡技术，通过内容路由器中的重定向（DNS）机制，在多个远程POP上均衡用户的请求，以使用户请求得到最近内容源的响应；")]),_._v(" "),e("p",[e("strong",[_._v("（3）内容交换")]),_._v("：它根据内容的可用性、服务器的可用性以及用户的背景，在POP的缓存服务器上，利用应用层交换、流分裂、重定向（ICP、WCCP）等技术，智能地平衡负载流量；")]),_._v(" "),e("p",[e("strong",[_._v("（4）性能管理")]),_._v("：它通过内部和外部监控系统，获取网络部件的状况信息，测量内容发布的端到端性能（如包丢失、延时、平均带宽、启动时间、帧速率等），保证网络处于最佳的运行状态。")]),_._v(" "),e("p",[e("strong",[_._v("6 . 主要特点")])]),_._v(" "),e("p",[e("strong",[_._v("1、本地Cache加速")]),_._v(" 提高了企业站点(尤其含有大量图片和静态页面站点)的访问速度，并大大提高以上性质站点的稳定性")]),_._v(" "),e("p",[e("strong",[_._v("2、镜像服务")]),_._v(" 消除了不同运营商之间互联的瓶颈造成的影响，实现了跨运营商的网络加速，保证不同网络中的用户都能得到良好的访问质量。")]),_._v(" "),e("p",[e("strong",[_._v("3、远程加速")]),_._v(" 远程访问用户根据DNS负载均衡技术智能自动选择Cache服务器，选择最快的Cache服务器，加快远程访问的速度")]),_._v(" "),e("p",[e("strong",[_._v("4、带宽优化")]),_._v(" 自动生成服务器的远程Mirror（镜像）cache服务器，远程用户访问时从cache服务器上读取数据，减少远程访问的带宽、分担网络流量、减轻原站点WEB服务器负载等功能。")]),_._v(" "),e("p",[e("strong",[_._v("5、集群抗攻击")]),_._v(" 广泛分布的CDN节点加上节点之间的智能冗余机制，可以有效地预防黑客入侵以及降低各种D.D.o.S攻击对网站的影响，同时保证较好的服务质量 。")]),_._v(" "),e("h3",{attrs:{id:"_8-1-同源两个标签页的通讯方式"}},[_._v("8.1 同源两个标签页的通讯方式")]),_._v(" "),e("p",[e("a",{attrs:{href:"https://blog.csdn.net/ciel_2/article/details/111998536",target:"_blank",rel:"noopener noreferrer"}},[_._v("详情》"),e("OutboundLink")],1)])])}),[],!1,null,null,null);v.default=o.exports}}]);